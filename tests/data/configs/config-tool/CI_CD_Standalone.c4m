cmd := command_name()
default_command = "insert"
# WARNING: This configuration was automatically generated
# by the Chalk install wizard.  Please do not edit it.  Instead, re-run it.

# Add in config for all the sinks we might need to generate;
# we will only subscribe the ones we need.

# If the config doesn't want a variable to be settable, the below
# code will read env(""), which will reduce to the empty string, which
# Chalk knows means the config isn't going to be used.

sink_config env_var_log_file {
  sink: "rotating_log"
  filters: ["fix_new_line"]
  max: <<10mb>>
  filename: env("CHALK_LOG_FILE")
}

sink_config env_var_post {
  sink:    "post"
  uri:     env("CHALK_POST_URL")
  headers: mime_to_dict(env("CHALK_POST_HEADERS"))
}

sink_config env_var_s3 {
  sink:   "s3"
  secret: env("CHALK_S3_URI")
  uid:    env("CHALK_S3_SECRET")
  uri:    env("CHALK_S3_ACCESS_ID")
}

sink_config pre_config_log {
  sink:    "rotating_log"
  max: <<10mb>>
  filters: ["fix_new_line"]
  filename: "./chalk-log.jsonl"
}

sink_config pre_config_post {
  sink:    "post"
  uri:     "https://example/report"
  headers: mime_to_dict("")
}

sink_config pre_config_s3 {
  sink:   "s3"
  uri:    ""
  secret: ""
  uid:    ""

}

# This determines whether we have been configured to output anything
# at all. It doesn't ensure the output configuration actually works!

set_sink := false

# If the settings chosen when generating this configuration allow env
# var configs to be in-addition-to a pre-configured value, then these
# will never get changed, resulting in a no-op.  Otherwise, they'll
# get set to False when sinks are properly configured via env var.

add_log_subscription := true
add_post_subscription := true
add_s3_subscription := true

ptr_value := ""


if sink_config.env_var_log_file.filename != "" {
  subscribe("report", "env_var_log_file")
  add_log_subscription  := false
  set_sink := true
}

if sink_config.env_var_post.uri != "" {
  subscribe("report", "env_var_post")
  add_post_subscription := false
  set_sink := true
  ptr_value := sink_config.env_var_post.uri
}

s3_fields_found := 0
if sink_config.env_var_s3.uri != "" {
  s3_fields_found := 1
}
if sink_config.env_var_s3.secret != "" {
  s3_fields_found := s3_fields_found + 1
}
if sink_config.env_var_s3.uid != "" {
  s3_fields_found := s3_fields_found + 1
}
if s3_fields_found == 3 {
  subscribe("report", "env_var_s3")
  add_s3_subscription   := false
  set_sink := true
  if ptr_value == "" {
    ptr_value := sink_config.env_var_s3.uri
  }
}
elif s3_fields_found != 0 {
  error("environment variable setting for S3 output requires setting " +
        "3 variables, but only " + $(s3_fields_found) + " were set.")
}


if add_log_subscription {
    subscribe("report", "pre_config_log")
    set_sink := true
}


subscribe("report", "json_console_out")
set_sink := true


outconf.insert.chalk = "chalk_minimal"
outconf.build.chalk  = "chalk_minimal"

keyspec.CHALK_PTR.value = strip(ptr_value)

profile.chalk_minimal.key.HOSTINFO_WHEN_CHALKED.report = true
profile.chalk_minimal.key.NODENAME_WHEN_CHALKED.report = true
profile.chalk_labels.key.CHALK_ID.report = true
profile.chalk_labels.key.METADATA_ID.report = true
docker.label_prefix = "run.crashoverride."
profile.host_report_default.key._ENV.report = true
profile.artifact_report_default.key.SIGNING.report = false
profile.artifact_report_default.key.SIGNATURE.report = false
profile.host_report_default.key.SAST.report = false
profile.artifact_report_default.key.SAST.report = false
profile.artifact_report_default.key.DOCKER_LABELS.report = true
profile.artifact_report_default.key.DOCKER_TAGS.report = true
profile.artifact_report_default.key.DOCKER_FILE.report = true
profile.artifact_report_default.key.DOCKERFILE_PATH.report = true
profile.artifact_report_default.key.DOCKER_PLATFORM.report = true
profile.host_report_default.key._ARGV.report = true
profile.artifact_report_default.key.DOCKER_CONTEXT.report = false
profile.host_report_default.key.DOCKER_CONTEXT.report = false
outconf.extract.artifact_report = "artifact_report_large"
outconf.extract.host_report     = "host_report_large"
# Turn on running SBOM tools
run_sbom_tools = true