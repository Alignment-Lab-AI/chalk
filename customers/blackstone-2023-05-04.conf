# What to use if the command isn't explicit.

default_command = "help"

cmd     := argv0()
args    := argv()

# This is used below to help determine how much to add to the chalk
# mark when using the 'insert' command.
ptr_url := ""

# If not provided, log_level will default to "warn".
# Options for log_level are:
# "trace" (show verbose messages)
# "info"  (show default messages)
# "warn"  (don't show informational messages, but do show warnings and errors)
# "error" (show ONLY actual fatal errors)
# "none"  (show nothing, not even errors)
#
# You can configure where these messages go; they get published to the
# "logs" topic, which automatically is hooked to stderr by default.

if cmd == "docker" {
  # For docker, only show error output on console if it's bad.  If you
  # want every message to be recorded in the chalk report (but not
  # sent to the console), you can change the value of
  # `chalk_log_level`, to "info" or "warn" (default is "error" only)
  log_level: "error"
}
else {
  log_level: "info"
  info("Using the default config. Use 'chalk confload' to load a new one.")
}


## I/O CONFIGURATION

## If you use the --dry-run flag (actually an alias for --virtual),
## then this controls what happens to the chalk mark, it no longer
## gets written into the artifact.  Basically, there's a pub-sub model
## and it gets published to the "virtual" topic.
##
## The virtual_chalk_config is a local log file.

subscribe("virtual", "virtual_chalk_log")


sink_config s3 {
  enabled: false
  sink:    "s3"
  secret:  env("AWS_ACCESS_SECRET")
  uid:     env("AWS_ACCESS_ID")
  uri:     env("AWS_S3_BUCKET_URI")
}

## This is an example of what you can do.  At this point, you will
## have some subscriptions set up, based on the command.  The code
## used for I/O in the base configuration is in the comments below;
## you can undo any of it if you really want!

if cmd == "extract" or cmd == "insert" or cmd == "delete" {
  if env_exists("AWS_S3_BUCKET_URI") {
    if not env_exists("AWS_ACCESS_ID") {
       warn("To configure AWS must provide AWS_ACCESS_ID")
    } elif not env_exists("AWS_ACCESS_SECRET") {
       warn("To configure AWS must provide AWS_ACCESS_SECRET")
    } else {
      if len(strip(ptr_url)) == 0 {
        ptr_url := env("AWS_S3_BUCKET_URI")
      }
      sink_config.s3.enabled = true
      #  Stuff you might do if the sink is configured...
      # subscribe("report", "s3")
      # unsubscribe("report", "console_out")
    }
  }
}

# Set up chalk pointers if we have a ptr_url set.
if len(strip(ptr_url)) > 0 {
    keyspec.CHALK_PTR.value = strip(ptr_url)
    outconf.insert.chalk = "chalking_ptr"
}

# This causes use to also write to a local log file.
use_report_cache = true

# The default profiles are configured in src/configs/baseconfig.c4m
# But you can decide to report on individual keys here, or create a
# new profile here that you *could* install (the above code around
# ptr_url changes a profile).

# For inserting chalk marks, there are 3 profiles:
# chalk -- what gets added to the chalk mark
# artifact_report -- what gets reported on per-artifact
# host_report -- what gets reported on per-host

# The "insert" and "docker" commands use the same reporting for
# artifact_report ("artifact_report_insert_base") and for host_report
# ("host_report_insert_base").

# They use a DIFFERENT chalk report right now; "insert" uses
# "chalking_default", but "docker" uses "chalking_ptr", which adds far
# fewer keys.

# Right now, none of the DOCKER* keys are reported in the default
# configuration (we haven't selected what should be default yet).
# So, here's some config to show it all:

profile.artifact_report_insert_base.key.DOCKER_FILE.report = true
profile.artifact_report_insert_base.key.DOCKERFILE_PATH.report = true
profile.artifact_report_insert_base.key.DOCKER_PLATFORM.report = true
profile.artifact_report_insert_base.key.DOCKER_LABELS.report = true
profile.artifact_report_insert_base.key.DOCKER_TAGS.report = true
profile.artifact_report_insert_base.key.DOCKER_CONTEXT.report = true

# This adds the tags into the actual chalk mark, just as an example.
profile.chalk_ptr.key.DOCKER_TAGS.report = true
