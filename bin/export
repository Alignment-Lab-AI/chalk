#!/usr/bin/env python3
# :Author: John Viega (john@crashoverride.com)
# :Copyright: 2022, 2023, Crash Override, Inc.

import os
import re
import shutil
import sys
import tempfile

dirs_to_skip = [
    "./.git",
    "./.github",
    "./tests",
    "./testbed",
    "./customers",
    "./bin",
    "./tests",
    "./chalk.dSYM",
    "./oss",
    "./config-tool",
    "./docker",
]
files_to_skip = [
    "./.editorconfig",
    "./.envrc",
    "./chalk",
    "./lto.o",
    "./Makefile",
    "./docker-compose.yml" "./docker-compose-cache.json",
    "./.pre-commit-config.yaml",
    "./src/configs/entrypoint.c4m",
    "./src/procmaps_linux.nim" # Not used yet.
    "./src/elf.nim", # Not used yet.
    "./src/commands/cmd_helpdump.nim"
]
files_to_move = {
    "./chalk_internal.nimble": "./chalk.nimble",
    "./docker-compose-public.yml": "./docker-compose.yml",
}
dont_process_files = []
oss_dont_delete = [".git"]

if len(sys.argv) != 2:
    print("Usage: " + sys.argv[0] + " [branch]")
    print(
        "This will create a new branch in the OSS repo populated with "
        + "code from this branch, with internal bits removed.\n"
        + "Internal code blocks starting with #% INTERNAL (ending with #% END)"
        + " will not be moved over, nor will files or directories listed "
        + "in the dirs_to_skip / files_to_skip arrays in this script.\n"
        + "Any files in files_to_move will be renamed in the new branch.\n"
        + "The resulting repo will be in oss/chalk/, and the code will NOT be "
        + "checked in."
    )
    quit(1)
tmpdir = tempfile.mkdtemp()


def preprocess(text, fname):
    result = ""
    lines = text.split("\n")
    skipping = False
    i = 0
    while i < len(lines):
        s = lines[i].strip()
        if not s.startswith("#%"):
            if not skipping:
                result += lines[i] + "\n"
            i += 1
            continue
        s = s[2:].strip().lower()
        if s == "internal":
            if skipping:
                print(
                    "ERROR (file: ",
                    fname,
                    "line: ",
                    i + 1,
                    "): Got #% INTERNAL when already in an internal block.",
                )
            skipping = True
            i += 1
            continue
        elif s == "end":
            if not skipping:
                print(
                    "ERROR (file: ",
                    fname,
                    "line: ",
                    i + 1,
                    "): Got #% when not skipping.",
                )
            skipping = False
            i += 1
            continue
        elif s.startswith("rewrite "):
            skipping = False
            i += 1
            both = s[8:]
            ix = both.find(" ")
            if ix == -1:
                print(
                    "ERROR (file: ",
                    fname,
                    "line: ",
                    i + 1,
                    "): REWRITE takes two args.",
                )
                continue
            first = both[:ix]
            rest = both[ix + 1 :]
            result += re.sub(first, rest, lines[i]) + "\n"
            i += 1
        else:
            print("ERROR, unknown directive: ", s)
            i += 1
            continue

    return result


def process_dir(dir, files):
    target_dir = os.path.abspath(os.path.join(tmpdir, dir))
    if target_dir != tmpdir:
        os.mkdir(target_dir)
    for filename in files:
        if os.path.join(dir, filename) in files_to_skip:
            continue
        infile = os.path.join(dir, filename)
        outfile = os.path.join(target_dir, filename)

        if infile in files_to_move:
            outfile = os.path.join(target_dir, files_to_move[infile])

        with open(infile, "r") as file:
            try:
                text = file.read()
            except:
                print("Error when processing file: ", infile)
                raise
            if "#%" in text and not dir in dont_process_files:
                text = preprocess(text, infile)

            with open(outfile, "w") as out:
                out.write(text)


try:
    for dir, subdirs, files in os.walk("."):
        if dir in dirs_to_skip:
            while len(subdirs):
                del subdirs[0]
            continue
        process_dir(dir, files)

    # At this point, everything is in /tmp.
    # now, we essentially:
    # rm -rf ./oss
    # mkdir oss
    # cd oss
    # git clone https://github.com/crashappsec/chalk.git
    # cd ..
    # rm -rf everything in oss/chalk except the stuff in dont_delete
    # Relace it all from the tmp directory.
    try:
        shutil.rmtree("oss")
    except:
        pass
    os.mkdir("oss")
    os.chdir("oss")
    os.popen("git clone https://github.com/crashappsec/chalk.git").read()
    os.chdir("chalk")
    branches = os.popen("git branch").readlines()
    for line in branches:
        if line[2:].strip() == sys.argv[1]:
            print("ERROR: branch " + sys.argv[1] + " already exists.")
            shutil.rmtree(tmpdir)
            os.chdir("../..")
            shutil.rmtree("oss")
            quit(1)

    os.popen("git checkout -b " + sys.argv[1]).read()

    # Clean up any files we don't want in the OSS repo before we copy.
    for name in os.listdir("."):
        if not name in oss_dont_delete:
            try:
                shutil.rmtree(name)
            except:
                try:
                    os.remove(name)
                except:
                    pass

    for name in os.listdir(tmpdir):
        shutil.move(os.path.join(tmpdir, name), name)

    os.chdir("../..")
finally:
    shutil.rmtree(tmpdir)

print("Cloned chalk into oss/chalk.")
print("In that repo, created branch: ", sys.argv[1])
print("This branch has no proprietary bits and can be merged.")
