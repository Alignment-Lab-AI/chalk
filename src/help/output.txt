%{H Output basics}%
Chalk currently defines the following "sinks" that you can output to:
%{T
Sink name::Description :: Configuration Parameters
stdout :: Write to stdout::n/a
stderr :: Write to stderr::n/a
file::Write to a local file::{red}filename
post :: Write via a HTTP/HTTPS post:: {red}uri, {red}headers {black}(must be in MIME format)
s3 :: Write to an S3 bucket :: {red}uid, {red}secret, {red}uri {black}(must be a link in the form: s3://bucket-name/object-name), {red}cacheid
custom :: Write to a con4m callback :: Any of the above
}%
Via configuration file, you can {green}configure{reset} each sink, and then attach those configurations to "topics".

Each sink can have multiple attached configurations.  Each configuration can set up parameters such as credentials and locations, and can also set up output filters.

Note that sinks are not used for data injection itself. But, before it exits, the system will publish chalk metadata, filtering based on profiles you control (it can be different keys than what you injected), and sending reports to any outputs you've configured.

The default output profiles attached to each command publish to the "report" topic.  You can also set up custom reports, to send different metadata to different places. For instacnce, there are built-in auditing profiles, and a built-in stat beacon upon insertion.  Each custom report automatically defines its own topic.  You just need to hook up an output sink.

The output system has the following built-in topics:
%{T
Topic::What it's for
report:: Default output reports go to this topic in JSON format. By default, this is attached to a local (self-truncating) log file, and stdout.  If you add an external sink, we recommend you unsubscribing stdout (but, unless you're using immutable or transient infra, not the log file, which is intended for redundancy).
defaults:: Show information about how the results of config file execution. Generally this goes to stderr by default.
audit:: For recording use of the command, along w/ command line flags and any external configuration file.  This goes to a self-truncating log file by default.
confload:: For recording the old configuration and the fact that a new configuration was loaded.
version:: Outputting basic command version info, when you run the {appName}version command. By default, this is connected to stderr.
help::Outputting help messages.  Connected to stderr.
log::Printing error messages, that are filtered based on the global log-level setting. Connected to stderr, and internally to chalk output (you can control them going into reports with the ERR_INFO and _OP_ERRORS keys... see {appName} help keys search ERR for a starting point on more info.
}%

There are also a few available filters:
%{T
Filter Name::Description
prettyJson::Format output as somewhat pretty-printed JSON.  Intended only for used with topics that write JSON, particularly, {red}extract, {red}inject, {red}nesting, {red}delete, {red}audit.
addTopic::Add topic information to the beginning and end of the output.
logLevel::Filter based on log-level.  Only works with the 'log' topic.
logPrefix::Adds the colored prefix to the log message.  Only works with the 'log' topic.
}%

%{h Examples }%

This first example connects the output of the {bold}defaults{reset} command to stdout when you run it, but if you don't run it, and pass the --defaults flag (which also publishes to the 'defaults' topic, publishing will go to stderr instead. This is taken from the 'default' configuration file.
%{c
sink_config({green}"redirectableOut"{cyan}, {green}"stdout"{cyan}, \{\})
sink_config({green}"defaultOut"{cyan},      {green}"stderr"{cyan}, \{\})
{brown} #argv() gets the command name.
if argv0() != {green}"defaults"{cyan} \{
    subscribe({green}"defaults"{cyan}, {green}"defaultOut"{cyan})
\} else \{
    subscribe({green}"defaults"{cyan}, {green}"redirectableOut"{cyan})
\}
}%

This example configures S3 as a sink, taking the configuration needed for that sink from environment variables.  You could test the existence of these environment variables first (and indeed we do that in the default configuration).
%{c
sink_config({green}"s3"{cyan}, {green}"s3"{cyan}, \{ {green}"secret"{cyan} : env({green}"AWS_ACCESS_SECRET"{cyan}),
                            {green}"uid"{cyan}    : env({green}"AWS_ACCESS_ID"{cyan}),
                            {green}"uri"{cyan}    : env({green}"AWS_S3_BUCKET_URI"{cyan}) \} )

{brown}# This is NOT done in the default config, you'd have to add it yourself.
subscribe({green}"report"{cyan}, {green}"s3"{cyan})
}%
