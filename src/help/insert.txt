%{H Usage: {appName} insert [COMMAND_OPTION]... [search path] }%
Inserts metadata into artifacts specified in the search path.

%{T <26::
Flags::Config Variable::Type::Description
-r, -R, --recursive, --no-recursive::recursive::bool::Determines whether a file scan will recursively walk paths.
-v, --virtual::virtual_chalk::bool::When chalking, do NOT modify artifacts (overrides config file)
-V, --no-virtual::virtual_chalk::bool::Disable virtual chalking (overriding config file settings)
-I, --container-image-id::container-image-id::string::A SHA-256 hash identifier for a container to mark (in hex format). Currently, the chalk to insert will ALWAYS be written to stdout, but should be baked into the top layer of the image where possible. Note that you should avoid having other sinks write to stdout if this flag might get used.  Generally, this stops all other codec processing, and will cause the 'insertion' piece to write to STDOUT so that it can be placed in a new wrapping container. Chalk currently does not do this wrapping itself.
-N, --container-image-name::container-image-name::string::The name of the container, which will be used as the ARTIFACT_PATH.   Only consulted when the container image ID is provided.
}%

On chalking, what gets put into the chalk mark will be determined by the active chalk profile after any user config file has loaded.  Each command's output configuration can be specified using the {bold}outconf{reset} section in the configuration file.

For instance, if you create a new profile named {red}my_chalk_mark{reset}, you can activate it for both regular and docker insertions with the following in your configuration file:
%{c
outconf.insert.chalk = "myconf"
outconf.docker.chalk = "myconf"
}%

For information on profiles, see:
{bold}{appName} help profile{reset}
