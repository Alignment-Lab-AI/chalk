default_recursive_doc := """
"Determines whether a file scan will recursively walk paths to find artifacts.
"""

getopts {
  # If this is set when we call getoptFinalize(), it'll get used.
  command_attribute: "default_command"
  default_yes_prefixes: []
  default_no_prefixes: ["no"]
  show_doc_on_err: true
  add_help_commands: false
  doc: """
{bold}Insert or extract metadata from software artifacts.{reset}

It's particularly useful for helping to map production with development, providing full tracability. Usually, metadata is produced at CI/CD time after software is built, and then collected from production. This command can both insert and extract, and send data off as appropriate.

This tool is meant to be easy in CI/CD-- just drop it into the right place in the pipeline, and never think about it again.

At the same time, it's very customizable. Administrators can easily produce stand-alone binaries that collect custom metadata.

Currently, chalk's behavior is easily customized, primarily via a flexible configuration file. The options provided at the command line are reserved for items where there's an obvious utilitiy in overriding without editing the config file.

%{-
See 'help config' for an overview of the configuration file.
See 'help topics' for a list of all help topics.
}%
"""
  arg_name: "ARG"

  flag_yn color {
    yes_aliases: ["c"]
    no_aliases:  ["C"]
    field_to_set: "color"
    doc: "Enable colors (overriding any config file settings)"
  }

  flag_help { }

  flag_choice log_level {
    aliases:      ["l"]
    choices:      ["verbose", "trace", "info", "warn", "error", "none"]
    add_choice_flags: true
    field_to_set: "log_level"
    doc: "Set the console log-level (overriding any config file settings)"
  }

  flag_arg config_file {
    aliases:  ["f"]
    callback: func set_config_file
    doc: "Location from which to read an external config file"
  }

  flag_multi_arg enable_profile {
    callback: func set_enabled_profiles
    doc: "List of reporting profiles to explicitly enable"
  }

  flag_multi_arg disable_profile {
    callback: func set_disabled_profiles
    doc: "List of reporting profiles to explicitly disable"
  }

  flag_multi_arg enable_report {
    callback: func set_enabled_reports
    doc: "A list of reporting configurations to explicitly enable"
  }

  flag_multi_arg disable_report {
    callback: func set_disabled_reports
    doc: "A list of reporting configurations to explicitly disable"
  }

  flag_arg report_cache_file {
    callback: func set_report_cache_file
    doc: """The location to use for the reporting cache, overriding any config file settings.
The reporting cache keeps a local copy of any reports made, to provide redundancy if there are network errors.
"""
  }

  flag_yn publish_defaults {
    field_to_set: "publish_defaults"
    doc: "Show config info. See 'help defaults' for more info."
  }

  flag_yn load_sbom_tools {
    field_to_set: "load_sbom_tools"
    doc: "Explicitly load any available tools for SBOM generation."
  }

  flag_yn load_sast_tools {
    field_to_set: "load_sast_tools"
    doc: "Explicitly load any available tools for static analysis."
  }

  flag_yn load_sign_tools {
    field_to_set: "load_default_signing"
    doc: "Explicitly load OpenPGP signing capabilities."
  }

  flag_yn use_report_cache {
    field_to_set: "use_report_cache"
    doc: "Enables or disables the reporting cache."
  }

  command insert {
    aliases:  ["inject", "ins", "in", "i"]
    args:     (0, high())
    doc:      """
On chalking, what gets put into the chalk mark will be determined by the active chalk profile after any user config file has loaded.  Each command's output configuration can be specified using the 'outconf' section in the configuration file.

For instance, if you create a new profile named 'my_chalk_mark', you can activate it for both regular and docker insertions with the following in your configuration file:

outconf.insert.chalk = "myconf"
outconf.docker.chalk = "myconf"


For information on profiles, see: 'help profile'
"""
    callback: func set_artifact_search_path(list[string])

    flag_arg container_image_id {
      aliases:    ["I"]
      field_to_set: "container_image_id"
      doc: """
A SHA-256 hash identifier for a container to mark (in hex format). Currently, the chalk to insert will ALWAYS be written to stdout, but should be baked into the top layer of the image where possible.
Note that you should avoid having other sinks write to stdout if this flag might get used.
Generally, this stops all other codec processing, and will cause the 'insertion' piece to write to STDOUT so that it can be placed in a new wrapping container. Chalk currently does not do this wrapping itself.
"""
    }

    flag_arg container_image_name {
      aliases: ["N"]
      field_to_set: "container_image_name"
      doc: """
The name of the container, which will be used as the ARTIFACT_PATH. Only consulted when the container image ID is provided.
"""
    }

    flag_yn virtual {
      yes_aliases: ["v"]
      no_aliases: ["V"]
      doc: "When chalking, do NOT modify artifacts (overrides config file)"
      field_to_set: "virtual_chalk"
    }

    flag_yn recursive {
      yes_aliases: ["r"]
      no_aliases: ["R"]
      doc: default_recursive_doc
      field_to_set: "recursive"
    }
  }

  command extract {
    aliases:  ["ex", "e"]
    args:     (0, high())
    callback: func set_artifact_search_path(list[string])
    doc: """
This command looks for existing chalk marks in artifacts, and reports on what it finds.  The reporting configuration is specified by the configuration file, but will default to simply reporting to stdout if nothing is configured.
"""

    flag_yn recursive {
      yes_aliases: ["r"]
      no_aliases: ["R"]
      doc: default_recursive_doc
      field_to_set: "recursive"
    }
  }

  command delete {
    aliases:  ["del"]
    args:     (0, high())
    callback: func set_artifact_search_path(list[string])
    doc: "Deletes metadata from all artifacts specified in the search path."

    flag_yn recursive {
      yes_aliases: ["r"]
      no_aliases: ["R"]
      doc: default_recursive_doc
      field_to_set: "recursive"
    }

  }

  command defaults {
    aliases:  ["def"]
    doc: """
Shows the results of evaluating the configuration, without actually doing any work with artifacts.

Even though they are related, there is a significant difference between the 'defaults' command and the --defaults flag.  They both dump the configuration after evaluating any config file, but they may easily produce different results.

That's because chalk uses 'con4m' for configuration, which, while typically just looking like a regular config file, can have arbitrary code added, with conditionals, and so-on.  The default configuration does, for instance, configure different output handlers, depending on the command given.

Running the 'defaults' command will therefore give you the information about the evaluation just when that command ran.  Whereas, '--publish-defaults extract' will dump the config as it resolves when you run the 'extract' command, which could be very similar, or very different.

Importantly though, running '--publish-defaults extract' still runs the 'extract' command.

This command does not show the contents of the config file(s) used, just key results from executing those config files.  And, generally there will be at least two 'stacked' configuration files.  See 'help config' for more information on the configuration file and con4m.
"""
  }

  command confdump {
    aliases: ["dump"]
    args:    (0, 1)
    doc: """
Reads the embedded configuration file, and outputs it, based on your output configuration (see 'help output').  In the default configuration, if no argument is given, the config file is written to stdout; and if an argument is provided, it will try write the configuration to the file specified by the argument.

This behavior can be overridden by the configuration file, where you can specify different output configurations.  See 'help config' for an overview of the configuration file format, and 'help output' for an overview of the output system.

"""
  }

  command confload {
    aliases:  ["load"]
    args:     (1, 1)
    callback: func on_conf_load(list[string])
    doc: """
Attempt to replaces the embedded configuration file, reading from the
specified file name.

You can use the 'confdump' command to dump the output first.

See 'help config' for an overview of the configuration file format.
"""
  }

  command version {
    aliases: ["vers", "v"]
    doc: "Outputs basic version information for the chalk binary."
  }

  command entrypoint {
    args:    (0, high())
    ignore_all_flags: true
    doc: "coming soon."
  }

  command docker {
    args:    (0, high())
    ignore_all_flags: true
    doc: "coming soon."
  }

  command help {
    ignore_bad_flags:   true
    arg_sub_mutex: false # should be the default?
    args: (0, high())

    command key {
      aliases:            ["keys", "k"]
      arg_sub_mutex: false # should be the default?
      args: (0, high())

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }

      command chalk {
        aliases: ["c"]
        args: (0, high())
      }

      command host {
        aliases: ["h"]
        args: (0, high())
      }

      command art {
        aliases: ["a", "artifact"]
        args: (0, high())
      }

      command report {
        aliases: ["r", "rep"]
        args: (0, high())
      }

      command search {
        aliases: ["s"]
        args: (1, high())
      }
  }

    command keyspec {
      aliases:            ["ks", "spec", "specs"]
      args: (0, high())
      arg_sub_mutex: false # should be the default?


      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command profile {
      aliases:             ["profiles", "pro", "pr"]
      arg_sub_mutex: false # should be the default?
      args: (0, high())

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command tool {
      aliases: ["tools", "t"]
      args: (0, high())
      arg_sub_mutex: false # should be the default?

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command plugin {
      aliases: ["plugins", "pi"]
      arg_sub_mutex: false # should be the default?
      args: (0, high())

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command sink {
      aliases: ["sinks"]
      arg_sub_mutex: false # should be the default?
      args: (0, high())

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command outconf {
      aliases: ["outconfs"]
      arg_sub_mutex: false
      args: (0, high())

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command custom_report {
      aliases: ["report", "reports"]
      arg_sub_mutex: false
      args: (0, high())

      command props {
        aliases: ["properties", "p", "pr", "prop", "show"]
        args: (0, high())
      }
    }

    command sbom {
      aliases: ["sboms"]
      arg_sub_mutex: false
      args: (0, high())
    }

    command sast {
      args: (0, high())
      arg_sub_mutex: false
    }
  }

  topics {
    topics: """
For info on metadata keys: 'chalk help keys'

For info on config file sections, use 'chalk help' with the metadata section as an argument.

%{H Available sections: }%
keyspec, tool, plugin, sink, outconf, custom_report, profile

For each section, you'll get an overview by default.  To then examine the properties, add 'props' after the command.  For instance:

%{T
Command::Description
chalk help keyspec        :: Gives detailed info about keyspecs & metadata keys
chalk help keyspec props  :: Gives info about each important keyspec field.
}%
"""
  builtins: """
%{H Builtin functions in config files}%
The following functions are in addition to those documented at: {red}https://github.com/crashappsec/con4m{reset}
%{T <30:
Function::Description
version() -> string::Returns the release version of the chalk binary.
argv0() -> string::Returns the command being run, per the command line. If you've set up a default action in the embedded configuration, that configuration will receive {brown}default{black} for this value when it runs.  Possible options are: {brown}"insert", {brown}"extract", {brown}"delete", {brown}"defaults", {brown}"confdump", {brown}"confload", {brown}"version", {brown}"help"
argv() -> [string]::Returns the arguments being used for the command. This may not be what was passed at the command line; it will pick up default values from previous configuration files.  You may not change argv() with immediate effect, but for the {brown}"extract", {brown}"insert" and {brown}"delete" commands, setting the {bold}{magenta}artifact_path{black} variable will lead to argv updating after the script ends.
error(string)::This prints an error message. Or, more precisely, publishes a message to the {magenta}log{black} topic. This is output subject to the i/o configuration. In the default configuration, it would go both to the console, and into any appropriate reports.
sink_config(string, string, dict[string, string], list[string])::Set up a configuration for an output sink.  The first parameter is the name of the configuration, the second the name of the sink, the third, configuration parameters specific to that sink, and the fourth, any desired filters. Sinks may have multiple configurations. Sink configurations are immediately available from the configuration file, via {magenta}subscribe() {black}or {magenta}unsubscribe(){black}. See {red}{appName} help output{black} for more details.
sink_config(string, string, dict[string, string]::Same as previous, with no filters.
subscribe(string, string)::Subscribes the sink configuration named in the first parameter, to the topic specified in the second parameter.  See {red}{appName} {red}help {red}output{black} for more information on topics.
unsubscribe(string, string)::Unsubscribes the sink configuration named in the first parameter from the topic specified in the second parameter.  This allows you to override inherited subscriptions, such as the default logging subscription. See {red}{appName} {red}help {red}output{black} for more information on topics.
}%
"""
  commands: """
%{T
Command     ::Description
insert      ::Insert chalk metadata into software artifacts.
extract     ::Retrieve locally-stored metadata from software artifacts.
delete      ::Delete locally stored metadata from software objects.
defaults    ::Loads configuration and shows keys defaults. See 'help defaults'.
confdump    ::Export the self-contained configuration file.
confload    ::Load a new configuration file.
docker      ::Adds a chalk mark to docker containers, and weaps the entry point.
version     ::Shows program version information
help        ::You're doing it now!
}%
See {bold}{appName} help 'command'{reset} for help on individual commands.
"""
  config: """
%{H Chalk Configuration Files }%

In their simplest form, they are fairly typical key-value configuration files for setting default values.

For instance, you can set some basic properties like so:

%{c
color: true
log_level: "warn"{brown}# Don't print out informational bits.
keyspec {red}CHALK_PTR{cyan} \{
  {brown}# This field is meant to be a URL to redirect people from the artifact
  {brown}# to where the full metadata is kept.
  value: {green}"https://www.myrepo.com/chalklookup/$\{chalkid\}"
\}
}%

If you run {bold}{appName} defaults{reset}, the last table will show configuration variables you can set in your configs.

The {bold}keyspec{reset} object type is used to define all the properties of the metadata fields that we can collect at any phase.  See {bold}{appName} help keyspec{reset} for an introduction to the types of metadata in chalk, and {bold}{appName} help keyspec props{reset} for the fields inside keyspec objects.

Generally, understanding keyspec fields is helpful for understanding metadata keys, but you only need to write these sections if you're defining new metadata (for instance, when writing a plugin).

However, there will be some cases where it's useful to override fields keyspec objects.

If you want to override a field, you just need to redefine it.  For instance, if you want to change the order in which metadata keys output by default, you can change the keyspec's {bold}output_order{reset} field.  Let's day that you wanted the {red}TIMESTAMP{reset} field (which defaults to 3), to go after the {red}CHALK_PTR{reset} field (which defaults to 400).

First, let's look at the base configuration for the timestamp field:
%{c
keyspec {red}TIMESTAMP{cyan} \{
    kind:             {green}Chalk   {brown} # An inherited enum value
    type:             {green}int     {brown} # An actual type literal
    standard:         {green}true    {brown} # A bool literal
    system:           {green}true
    conf_as_system:   {green}true
    since:            {green}"0.1.0" {brown} # A string literal
    output_order:     {green}3
\}
}%

You can simply write:
%{c
  keyspec.{red}TIMESTAMP.{cyan}output_order = {green}401
}%

This will clobber the output_order field for the base configuration.  Note that this syntax is identical to the following:
%{c
keyspec {red}TIMESTAMP{cyan} \{
  output_order: {green}401
\}
}%

The section style and property style are the same, and : and = do the same thing too.  The format should be really familiar to anyone who has ever written a configuration file.

Note that some properties cannot be overridden; you will get an error loading your config file if you try to redefine them.  In fact, many properties in keyspect sections cannot be modified.

Whether fields are locked or not depends on the metadata key.  For instance, the metadata key {bold}MAGIC{reset}, which is only used to identify chalk marks in artifacts, must always appear first in any context in which it appears. So its output_order field is locked.

Lock information will be coming soon to the detail you see when you run, for example, {bold}{appName} help key TIMESTAMP{reset}.

For fields in keyspecs that you can set, some keys (especially those not marked as 'system' keys) can have their value set, either statically once the configuration loads, via the 'value' property, or dynamically, on a per-artifact basis with the 'callback' property.

For instance, even though you cannot override it, the {red}CHALK_RAND{reset} metadata field, which produces a new random 64-bit number for each artifact chalked (in hex format), is implemented in the base configuration as so:

%{c
  keyspec.{red}CHALK_RAND.{cyan}callback: {green}func call_rand

  func {red}call_rand{cyan}({green}key{cyan}) \{
    return {green} $(lower(hex(rand())))  {brown}# $() converts items to strings
  \}
}%

Chalk embeds a small, efficient DSL called {bold}con4m{reset}, specifically made to intertwine configuration and customization with lightweight code.

Chalk aims to make it both easy and flexible to capture arbitrary metadata about software artifacts, the fact that the world isn't homogenous requires a lot of flexibility that can definitely require advanced customization. Con4m was designed explicitly to be a CONfiguration file for (4) Most people, but make it really easy for those who need to do more advanced customization to do so.

Everything is strongly typed statically wherever possible, and almost fully type interenced (one only needs to specify types when a function call is ambiguous... con4m does static dispatch for everything currently).

This gives us the flexibility to change how Chalk behaves based on the operating environment. For instance, if you have two data stores, one for things running AWS, and one for everything else, you could decide to do different things with a key, depending on whether AWS is going to get used.  For instance:

%{c
keyspec {red}CHALK_PTR{cyan} \{
  if envExists({green}"AWS_S3_BUCKET_URI"{cyan}) and envExists({green}"AWS_ACCESS_SECRET"{cyan}) \{
    value: {green}"s3://some-bucket/chalk-$\{artifactid\}"
  \} else \{
    value: {green}"https://www.myrepo.com/chalklookup/$\{artifactid\}"
  \}
\}
}%

This is equally written as:
%{c
  if envExists({green}"AWS_S3_BUCKET_URI"{cyan}) and envExists({green}"AWS_ACCESS_SECRET"{cyan}) \{
    keyspec.{red}CHALK_PTR.{cyan}value = {green}"s3://some-bucket/chalk-$\{artifactid\}"
  \} else \{
    keyspec.{red}CHALK_PTR.{cyan}value = {green}"https://www.myrepo.com/chalklookup/$\{artifactid\}"
  \}
}%

Chalk has typical core data types, including strings, ints, floats, lists and dictionaries. Strings used as values need to be put in quotes. It also has a bunch of other data types that are used internally.  See the con4m manual (link below) for more.

%{h Configuration stacking}%
Chalk configuration files {invert}stack{reset}. Specifically:

- The system loads a base configuration file that loads the underlying schema and some core implementation details.

- A second set of configurations are run, unless completely disabled by command-line flag, setting up third party tools like SAST tools and SBOM tools (You can also disable these via your config file, of course).

- An 'embedded' configuration file loads, that is carried around with the chalk executable (which can be changed). This configuration typically configures when and where to send different kinds of output, and can contain any custom metadata collection. See '{appName} help output' for more information on output.

- A user configuration file loads.

The result of the configuration file executing is a set of key / value pairs. For those pairs, items defined in the most recent configuration file take priority, unless fields get "locked" (primarily, key bits of the underlying metadata schema are locked to help ensure correct metadata collection).

Con4m's features are documented at {red}https://github.com/crashappsec/con4m{reset}. It comes with a number of built-in functions that can be called from the configuration file. chalk exports all of those, and adds other builtins.

See {bold}{appName} help builtins{reset} for a list of builtin functions that can be called from the configuration file that are specific to Chalk (we also make available all of Con4m's builtins).
"""
  output: """
%{H Output basics}%
Chalk currently defines the following "sinks" that you can output to:
%{T
Sink name::Description :: Configuration Parameters
stdout :: Write to stdout::n/a
stderr :: Write to stderr::n/a
file::Write to a local file::{red}filename
post :: Write via a HTTP/HTTPS post:: {red}uri, {red}headers {black}(must be in MIME format)
s3 :: Write to an S3 bucket :: {red}uid, {red}secret, {red}uri {black}(must be a link in the form: s3://bucket-name/object-name), {red}cacheid
custom :: Write to a con4m callback :: Any of the above
}%
Via configuration file, you can {green}configure{reset} each sink, and then attach those configurations to "topics".

Each sink can have multiple attached configurations.  Each configuration can set up parameters such as credentials and locations, and can also set up output filters.

Note that sinks are not used for data injection itself. But, before it exits, the system will publish chalk metadata, filtering based on profiles you control (it can be different keys than what you injected), and sending reports to any outputs you've configured.

The default output profiles attached to each command publish to the "report" topic.  You can also set up custom reports, to send different metadata to different places. For instacnce, there are built-in auditing profiles, and a built-in stat beacon upon insertion.  Each custom report automatically defines its own topic.  You just need to hook up an output sink.

The output system has the following built-in topics:
%{T
Topic::What it's for
report:: Default output reports go to this topic in JSON format. By default, this is attached to a local (self-truncating) log file, and stdout.  If you add an external sink, we recommend you unsubscribing stdout (but, unless you're using immutable or transient infra, not the log file, which is intended for redundancy).
defaults:: Show information about how the results of config file execution. Generally this goes to stderr by default.
audit:: For recording use of the command, along w/ command line flags and any external configuration file.  This goes to a self-truncating log file by default.
confload:: For recording the old configuration and the fact that a new configuration was loaded.
version:: Outputting basic command version info, when you run the {appName}version command. By default, this is connected to stderr.
help::Outputting help messages.  Connected to stderr.
log::Printing error messages, that are filtered based on the global log-level setting. Connected to stderr, and internally to chalk output (you can control them going into reports with the ERR_INFO and _OP_ERRORS keys... see {appName} help keys search ERR for a starting point on more info.
}%

There are also a few available filters:
%{T
Filter Name::Description
prettyJson::Format output as somewhat pretty-printed JSON.  Intended only for used with topics that write JSON, particularly, {red}extract, {red}inject, {red}nesting, {red}delete, {red}audit.
addTopic::Add topic information to the beginning and end of the output.
logLevel::Filter based on log-level.  Only works with the 'log' topic.
logPrefix::Adds the colored prefix to the log message.  Only works with the 'log' topic.
}%

%{h Examples }%

This first example connects the output of the {bold}defaults{reset} command to stdout when you run it, but if you don't run it, and pass the --defaults flag (which also publishes to the 'defaults' topic, publishing will go to stderr instead. This is taken from the 'default' configuration file.
%{c
sink_config({green}"redirectableOut"{cyan}, {green}"stdout"{cyan}, \{\})
sink_config({green}"defaultOut"{cyan},      {green}"stderr"{cyan}, \{\})
{brown} #argv() gets the command name.
if argv0() != {green}"defaults"{cyan} \{
    subscribe({green}"defaults"{cyan}, {green}"defaultOut"{cyan})
\} else \{
    subscribe({green}"defaults"{cyan}, {green}"redirectableOut"{cyan})
\}
}%

This example configures S3 as a sink, taking the configuration needed for that sink from environment variables.  You could test the existence of these environment variables first (and indeed we do that in the default configuration).
%{c
sink_config({green}"s3"{cyan}, {green}"s3"{cyan}, \{ {green}"secret"{cyan} : env({green}"AWS_ACCESS_SECRET"{cyan}),
                            {green}"uid"{cyan}    : env({green}"AWS_ACCESS_ID"{cyan}),
                            {green}"uri"{cyan}    : env({green}"AWS_S3_BUCKET_URI"{cyan}) \} )

{brown}# This is NOT done in the default config, you'd have to add it yourself.
subscribe({green}"report"{cyan}, {green}"s3"{cyan})
}%
"""
  }
}

func set_config_file(filename) {
   dir, file := filename.path_split()
   arr := attr_get("config_path", list[string])
   add_override("config_path", array_add(arr, [dir]))
   add_override("config_filename", file)
   return ""
}

profiles_seen := []
reports_seen  := []
export profiles_seen
export reports_seen

func set_profile_on_off(names: list[string], val) {
   result := ""
   profs := sections("profile")
   for i from 0 to len(names) {
     if profiles_seen.contains(names[i]) {
       return "Already set a value for profile '" + names[i] + "'"
     }
     profiles_seen := array_add(profiles_seen, [names[i]])
     if not profs.contains(names[i]) {
       return ("No such profile: '" + names[i] + "'\nKnown profiles are: " +
               profs.join(", "))
     }
     add_override("profile." + names[i] + ".enabled", val)
   }
}

func set_reports_on_off(names: list[string], val) {
   result := ""
   reports := sections("custom_report")
   for i from 0 to len(names) {
     if reports_seen.contains(names[i]) {
       return "Already set a value for report '" + names[i] + "'"
     }
     reports_seen := array_add(reports_seen, [names[i]])
     if not reports.contains(names[i]) {
       return ("No such report: '" + names[i] + "'\nKnown reports are: " +
               reports.join(", "))
     }
     add_override("custom_report." + names[i] + ".enabled", val)
   }
}

func set_enabled_profiles(names) {
  return set_profile_on_off(names, true)
}

func set_disabled_profiles(names) {
  return set_profile_on_off(names, false)
}

func set_enabled_reports(names) {
  return set_reports_on_off(names, true)
}

func set_disabled_reports(names) {
  return set_reports_on_off(names, false)
}

func set_report_cache_file(file) {
  result := ""

  add_override("use_report_cache", true)
  add_override("report_cache_location", file)
}

func set_artifact_search_path(args: list[string]) {
  if args.len() == 0 {
    return
  }

  path := []
  for i from 0 to len(args) {
    resolved := resolve_path(args[i])
    path := array_add(path, [resolved])
  }

  add_override("artifact_search_path", path)
}

func on_conf_load(args: list[string]) {
  add_override("artifact_search_path", [program_path() + "/" + program_name()])
}
