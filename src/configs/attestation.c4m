##
## Copyright (c) 2023, Crash Override, Inc.
##
## This file is part of Chalk
## (see https://crashoverride.com/docs/chalk)
##

## Builtin attestation implementation(s).


# installs attestation and returns true if it succeeded.

func install_cosign() {
  # Follow https://docs.sigstore.dev/attestation/installation/
  # to install attestation
  #
  # First attempt to install the go version

  output, go_exists := system("which go")
  if go_exists == 0 {
    install_out, ok := system("go install github.com/sigstore/cosign/v2/cmd/cosign@latest")
    if ok != 0 {
      warn("unable to install attestation into $GOPATH/bin/cosign; " +
            "attempting curl install")
    } else {
      return true
    }
  }

  # go was not present (or errored) - attempt to install via curl in /tmp
  host_arch := arch()
  host_os := osname()
  if host_os == "macosx" {
    host_os := "darwin"
  }
  install_name := "cosign-" + host_os + "-" + host_arch
  install_url  := "https://github.com/sigstore/cosign/releases/latest/download/" + install_name

  download_cmd := ["curl", "-O", "-L", install_url]
  chmod_cmd    := ["chmod", "+x", install_name]
  mv_cmd       := ["mv", install_name, "/tmp/cosign"]

  attestation_download_cmd := [download_cmd.join(" "),
                               chmod_cmd.join(" "),
                               mv_cmd.join(" ")]

  output, code := system(attestation_download_cmd.join(" && "))

  if code == 0 {
    trace("Successfully installed attestation into /tmp/cosign")
    return true
  }

  trace("Unable to install attestation via curl. url:" + install_url +
        " output: " + output)
  return false
}

func load_attestation_binary() {
  result             := ""
  supplemental_path  := [env("GOPATH") + "/bin", "~/go/bin", "/tmp"]
  attestation_binary := find_exe("cosign", supplemental_path)

  if attestation_binary == "" {
    if install_cosign() {
      attestation_binary := find_exe("cosign", supplemental_path)
      if attestation_binary == "" {
        error("cosign could not be found!!!")
        return attestation_binary
      }
    }
  }

  return attestation_binary
}
