## This is the default startup configuration that ships with Chalk. It
## runs after the base configuration. By default, not much happens
## here; there's a bit of example code that shows off I/O
## configuration, that doubles as an example to show how to allow
## people to use environment variables of your choosing, to set
## important configuration parameters, but otherwise is intended for
## you to customize.
##
## This config is meant to be edited and reloaded by users, and can be
## used to embed defaults for any of chalk's con4m configuration
## variables.
##
## To do that, one can use the 'confdump' command to get the current
## config, and the 'load' command to load a new one.
##
## Note that the initial I/O setup can be overridden here, but is
## codified in baseconfig.c4m to make sure that it is easy to get to a
## good known state if there are catastrophic configuration mistakes.
##
## Also, if allowed by this file (and by default, it's allowed), it
## is possible to run an external configuration file.  Generally, the
## best use for such a file is testing functionality before loading it
## into this default configuration! It tends to make debugging problems
## much easier.
##
## Note that configuration flags will override config files, except in
## some cases where the config file explicitly disallows such overrides.
##
## Useful examples of collecting arbitrary metadata via the config file
## can be found in the 'examples' dir of the official chalk repository.
##
## :Author: John Viega (john@crashoverride.com)
## :Copyright: 2022, 2023, Crash Override, Inc.

# The following default commands are currently valid:
# help, insert, extract, version, docker
#
# The default only gets used if nothing else is given at the command
# line, at all.  If you pass any flags at all, you must pass in a
# command.
#
# If you pick a default command, note that, when this script asks for
# the command via the argv0() call, the result will be "default", NOT
# the value you pick.  So make sure to set up your output
# configuration properly if you change this value.
#

# Uncomment the next line for chalk to assume 'docker' when no command is
# provided.

# default_command = "docker"

cmd     := argv0()
args    := argv()

# If not provided, log_level will default to "warn".
# Options for log_level are:
# "trace" (show verbose messages)
# "info"  (show default messages)
# "warn"  (don't show informational messages, but do show warnings and errors)
# "error" (show ONLY actual fatal errors)
# "none"  (show nothing, not even errors)
#
# You can configure where these messages go; they get published to the
# "logs" topic, which automatically is hooked to stderr by default.

if cmd == "docker" {
  # For docker, only show error output on console if it's bad.  If you
  # want every message to be recorded in the chalk report (but not
  # sent to the console), you can change the value of
  # `chalk_log_level`, to "info" or "warn" (default is "error" only)
  log_level: "error"
}
else {
  log_level: "info"
  # Uncomment to output log messages from within the config.
  # info("Using the default config. Use 'chalk load' to load a new one.")
}




# By default, all collected metadata gets added to the chalk inserted
# into the artifact.  If you provide the CHALK_PTR key, then most
# things will NOT go into the chalk, which assumes you put it
# somewhere else, where the CHALK_PTR points. In this example
# configuration, if you provide a value for ptr_url (a local variable
# specific to this config file), it'll use it.
#
# And, if you provide the right AWS S3 environment variables, this
# config will automatically use the S3 bucket's URL as that pointer,
# and only write a minimal chalk into artifacts.

ptr_url := ""

## I/O CONFIGURATION


# The sink config gets loaded on first subscription, so if
# virtual isn't on, let's not ever create an empty file.
if virtual_chalk {
 subscribe("virtual", "virtual_chalk_log")
}

sink_config s3 {
  enabled: false
  sink:    "s3"
  secret:  env("AWS_ACCESS_SECRET")
  uid:     env("AWS_ACCESS_ID")
  uri:     env("AWS_S3_BUCKET_URI")
}

## This is an example of what you can do.  At this point, you will
## have some subscriptions set up, based on the command.  The code
## used for I/O in the base configuration is in the comments below;
## you can undo any of it if you really want!

if env_exists("AWS_S3_BUCKET_URI") {
  if not env_exists("AWS_ACCESS_ID") {
     warn("To configure AWS must provide AWS_ACCESS_ID")
  } elif not env_exists("AWS_ACCESS_SECRET") {
     warn("To configure AWS must provide AWS_ACCESS_SECRET")
  } else {
    if len(strip(ptr_url)) == 0 {
      ptr_url := env("AWS_S3_BUCKET_URI")
    }
    sink_config.s3.enabled = true
    subscribe("report", "s3")
  }
}

# Set up chalk pointers if we have a ptr_url set.
if len(strip(ptr_url)) > 0 {
    keyspec.CHALK_PTR.value = strip(ptr_url)
    outconf.insert.chalk = "chalking_ptr"
}
use_report_cache = true

#% INTERNAL
docker.wrap_entrypoint = false
docker.entrypoint_report_sink = "s3"
#% END

# Below this point is configuration code that has already run, before
# your base configuration loaded. You can safely delete these comments
# when you reload your base configuration.
