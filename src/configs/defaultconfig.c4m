# If not provided, log_level will default to "warn".
# Options for log_level are:
# "trace" (show verbose messages)
# "info"  (show default messages)
# "warn"  (don't show informational messages, but do show warnings and errors)
# "error" (show ONLY actual fatal errors)
# "none"  (show nothing, not even errors)
#
# You can configure where these messages go; they get published to the
# "logs" topic, which automatically is hooked to stderr by default.

log_level: "info"

# info("Loading the default SAMI config")

# The following default commands are valid:
# help, insert, extract, version
#
# The default only gets used if nothing else is given at the command
# line, at all.  If you pass any flags at all, you must pass in a
# command.
#
# If you pick a default command, note that, when this script asks for
# the command via the argv0() call, the result will be "default", NOT
# the value you pick.  So make sure to set up your output
# configuration properly if you change this value.
#
# You can comment this out, and people will get a terse error message.
default_command = "help"

## KEY CONFIGURATION

key INSERTION_HOSTINFO {
    hostinfo, exitCode := system("uname -a")
    if exitCode == 0 {
      value: hostinfo
    }
}

## I/O CONFIGURATION

## This is an example of what you can do.  At this point, you will
## have some subscriptions set up, based on the command.  The code
## used for I/O in the base configuration is in the comments below;
## you can undo any of it if you really want!

cmd  := argv0()
args := argv()

if cmd == "extract" or cmd == "insert" or cmd == "delete" {
  if envExists("AWS_S3_BUCKET_URI") {
    if not envExists("AWS_ACCESS_ID") {
       warn("To configure AWS must provide AWS_ACCESS_ID")
    } elif not envExists("AWS_ACCESS_SECRET") {
       warn("To configure AWS must provide AWS_ACCESS_SECRET")
    } else {
      sink_config("s3", "s3", { "secret" : env("AWS_ACCESS_SECRET"),
                                "uid"    : env("AWS_ACCESS_ID"),
                                "uri"    : env("AWS_S3_BUCKET_URI") }, [])
      #  Stuff you might do if the sink is configured...
      # subscribe("insert", "s3")
      # subscribe("extract", "s3")
      # subscribe("delete", "s3")
      # unsubscribe("insert", "user_out")  # Stop JSON from going to console.
    }
  }
}

# Note that, if there is no command given, the value of "cmd" here
# will be 'default' here, instead of the value you picked as a
# default.  Your default doesn't go into effect until this script
# finishes running.

info("running command: " + argv0())

# Configuration code that has already run, before your base configuration
# loaded:
#
