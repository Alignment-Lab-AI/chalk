## This is the default startup configuration that ships with SAMI. It
## runs after the base configuration. By default, not much happens
## here; there's a bit of example code that shows off I/O
## configuration, that doubles as an example to show how to allow
## people to use environment variables of your choosing, to set
## important configuration parameters, but otherwise is intended for
## you to customize.
##
## This config is meant to be edited and reloaded by users, and can be
## used to embed defaults for any of SAMI's con4m configuration
## variables.
##
## To do that, one can use the 'confdump' command to get the current
## config, and the 'confload' command to load a new one.
##
## Note that the initial I/O setup can be overridden here, but is
## codified in baseconfig.c4m to make sure that it is easy to get to a
## good known state if there are catastrophic configuration mistakes.
##
## Also, if allowed by this file (and by default, it's allowed), it
## is possible to run an external configuration file.  Generally, the
## best use for such a file is testing functionality before loading it
## into this default configuration! It tends to make debugging problems
## much easier.
##
## Note that configuration flags will override config files, except in
## some cases where the config file explicitly disallows such overrides.
##
## :Author: John Viega (john@crashoverride.com)
## :Copyright: 2022, 2023, Crash Override, Inc.

# If not provided, log_level will default to "warn".
# Options for log_level are:
# "trace" (show verbose messages)
# "info"  (show default messages)
# "warn"  (don't show informational messages, but do show warnings and errors)
# "error" (show ONLY actual fatal errors)
# "none"  (show nothing, not even errors)
#
# You can configure where these messages go; they get published to the
# "logs" topic, which automatically is hooked to stderr by default.

log_level: "info"

# info("Loading the default SAMI config")

# The following default commands are valid:
# help, insert, extract, version
#
# The default only gets used if nothing else is given at the command
# line, at all.  If you pass any flags at all, you must pass in a
# command.
#
# If you pick a default command, note that, when this script asks for
# the command via the argv0() call, the result will be "default", NOT
# the value you pick.  So make sure to set up your output
# configuration properly if you change this value.
#
# You can comment this out, and people will get a terse error message.
default_command = "help"

cmd     := argv0()
args    := argv()
ptr_url := ""

## KEY CONFIGURATION

fallback_cmd       := "uname -a"


func osx_host_info() {
  hostinfo_cmd := "uname -a"
  platuuid_cmd := "/usr/sbin/ioreg -d2 -c IOPlatformExpertDevice | " +
                  "awk -F\\\" '/IOPlatformUUID/{print $(NF-1)}'"
  ifaces_cmd   := "for i in $(ifconfig -lu); do if ifconfig $i | " +
                  "grep -q \"status: active\" ; then echo $i\:; fi; done; "
  ifcfg_cmd    := "ifconfig "
  extip_cmd    := "/usr/bin/dig +short myip.opendns.com @resolver1.opendns.com"
  gip_cmd_pre  := "curl \"https://api.geoiplookup.net/?query="
  gip_cmd_post := "&json=true\" 2>/dev/null"


  hostinfo     := strip(run(hostinfo_cmd))
  platuuid     := strip(run(platuuid_cmd))
  iface_str    := slice(strip(run(ifaces_cmd)), 0, -2)
  extip        := strip(run(extip_cmd))
  myip         := strip(run(extip_cmd))
  gipinfo      := run(gip_cmd_pre + myip + gip_cmd_post)
  ifaces       := split(iface_str, ":")
  iface_detail := ""

  for i from 0 to len(ifaces) {
    iface_detail := iface_detail + run(ifcfg_cmd + strip(ifaces[i]))

  }

  result := "[[Host Info]]\n" + hostinfo + "\n\n[[Host UUID]]\n" + platuuid
  result := result + "\n\n[[Active Interfaces]]\n" + iface_detail
  result := result + "\n\n[[External Host Info]]" + gipinfo

  return result
}

func linux_host_info() {
  hostinfo_cmd := "uname -a"
  platuuid_cmd := "cat /sys/class/dmi/id/board_serial /etc/machine-id " +
                      "/sys/class/dmi/id/product_uuid 2>/dev/null"
  ifcfg_cmd    := "ifconfig 2>/dev/null"
  extip_cmd    := "dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/null"
  gip_cmd_pre  := "curl \"https://api.geoiplookup.net/?query="
  gip_cmd_post := "&json=true\" 2>/dev/null"


  hostinfo     := strip(run(hostinfo_cmd))
  platuuid     := strip(run(platuuid_cmd))
  extip        := strip(run(extip_cmd))
  myip         := strip(run(extip_cmd))
  gipinfo      := strip(run(gip_cmd_pre + myip + gip_cmd_post))
  iface_detail := strip(run(ifcfg_cmd))

  result := "[[Host Info]]\n" + hostinfo + "\n\n[[Host UUID]]\n" + platuuid
  result := result + "\n\n[[Active Interfaces]]\n" + iface_detail
  result := result + "\n\n[[External Host Info]]\n" + gipinfo

  return result
}

os := osname()

hostinfo := ""

if os == "Darwin" {
   hostinfo := osx_host_info()
}
elif contains(os, "Linux") {
   hostinfo := linux_host_info()
}
else {
   hostinfo := run(fallback_cmd)
}

if len(hostinfo) > 0 {
  echo(hostinfo)

  key INSERTION_HOSTINFO {
    value: strip(hostinfo)
  }
}

## I/O CONFIGURATION

## This is an example of what you can do.  At this point, you will
## have some subscriptions set up, based on the command.  The code
## used for I/O in the base configuration is in the comments below;
## you can undo any of it if you really want!

if cmd == "extract" or cmd == "insert" or cmd == "delete" {
  if envExists("AWS_S3_BUCKET_URI") {
    if not envExists("AWS_ACCESS_ID") {
       warn("To configure AWS must provide AWS_ACCESS_ID")
    } elif not envExists("AWS_ACCESS_SECRET") {
       warn("To configure AWS must provide AWS_ACCESS_SECRET")
    } else {
      sink_config("s3", "s3", { "secret" : env("AWS_ACCESS_SECRET"),
                                "uid"    : env("AWS_ACCESS_ID"),
                                "uri"    : env("AWS_S3_BUCKET_URI") }, [])
      ptr_url := env("AWS_S3_BUCKET_URI")
      #  Stuff you might do if the sink is configured...
      # subscribe("insert", "s3")
      # subscribe("extract", "s3")
      # subscribe("delete", "s3")
      # unsubscribe("insert", "user_out")  # Stop JSON from going to console.
    }
  }
}

if len(ptr_url) > 0 {
  key SAMI_PTR {
    value: ptr_url
  }
}

# Note that, if there is no command given, the value of "cmd" here
# will be 'default' here, instead of the value you picked as a
# default.  Your default doesn't go into effect until this script
# finishes running.

info("running command: " + argv0())

# Configuration code that has already run, before your base configuration
# loaded:
#
